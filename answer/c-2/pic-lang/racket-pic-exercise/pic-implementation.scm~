#lang scheme
(require htdp/testing)
;; To implement the picture language based on the two primitives from
;; the supports code, and to avoid name confliction, I will add all the
;; primitives implements here a prefix "my-".

;; first the vector
(define (my-make-vect x y)
  (cons x y))

(define (my-xcor-vect v)
  (car v))

(define (my-ycor-vect v)
  (cdr v))

(define (my-add-vect v1 v2)
  (my-make-vect (+ (my-xcor-vect v1)
                   (my-xcor-vect v2))
                (+ (my-ycor-vect v1)
                   (my-ycor-vect v2))))

(define (my-sub-vect v1 v2)
  (my-make-vect (- (my-xcor-vect v1)
                   (my-xcor-vect v2))
                (- (my-ycor-vect v1)
                   (my-ycor-vect v2))))

(define (my-scale-vect s v)
  (my-make-vect (* s (my-xcor-vect v))
                (* s (my-ycor-vect v))))

;; simple tests
(define v1 (my-make-vect 0 4))
(define v2 (my-make-vect 4 0))
(check-expect (my-add-vect v1 v2) (my-make-vect 4 4))
(check-expect (my-sub-vect v1 v2) (my-make-vect -4 4))
(check-expect (my-scale-vect 2 v1) (my-make-vect 0 8))

(generate-report)