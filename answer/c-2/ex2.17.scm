(define (last-pair l)
  (define (last-element e l)
    (if (null? l)
	(list e)
	(last-element (car l) (cdr l))))
  (if (null? l)
      (error "empty list")
      (last-element (car l) (cdr l))))

(define (last-pair-2 l)
  (define (one-element-list? l)
    (null? (cdr l)))
  (if (one-element-list? l)
      (list (car l))
      (last-pair-2 (cdr l))))

(define l-1 (list 1 2 3 4 14))
(define l-2 (list 14 4 3 2 -4))

(define (list=? l1 l2 op)
  (cond ((and (null? l1) (null? l2))
		 true)
		((or (null? l1) (null? l2))
		 false)
		(else (and (op (car l1) (car l2))
				   (list=? (cdr l1) (cdr l2) op)))))

(assert '(list=? (last-pair l-1) '(14) =))
(assert '(list=? (last-pair l-2) '(-4) =))

(assert '(list=? (last-pair-2 l-1) '(14) =))
(assert '(list=? (last-pair-2 l-2) '(-4) =))
